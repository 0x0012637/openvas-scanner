  OpenVAS Transport Protocol Specification 1.0

  Authors:
    Michael Wiegand <michael.wiegand@intevation.de>
    Jan-Oliver Wagner <jan-oliver.wagner@intevation.de>

ABOUT THIS DOCUMENT
  This document describes OTP, the protocol used for communication between the
  server and client modules of the Open Vulnerability Assessment System
  (OpenVAS).

STATUS
  This document is currently a draft; it does not describe the complete protocol
  yet but is still close to the Nessus Transport Protocol, version 1.2.

  Apart from this the documentation itself is not complete yet.

INTRODUCTION
  The OpenVAS project is a fork of the Nessus project. Because of this, the
  initial protocol used for client-server communication was the Nessus
  Transport Protocol (NTP). In order to address the shortcomings of NTP and to
  facilitate further improvements in the OpenVAS modules it became necessary to
  make changes to the protocol. Since NTP was specified by the Nessus project
  and changes to NTP by the Nessus project are to be expected, a decision was
  made to switch to a new protocol to avoid collisions with future protocol
  specifications by the Nessus project and to avoid confusion with other
  well-established protocols.

GENERAL CONSIDERATIONS
  The initial specification of the OpenVAS Transport Protocol (OTP) is very
  close to the NTP implementation in the last versions available under the GNU
  General Public License (GPL).

CHANGES
  This section describes the changes between NTP 1.2 and OTP 1.0.

  Plug-in upload:
  Section 10 of the NTP Extensions describes the ATTACHED_PLUGIN message type.
  Using this message type, it was possible for a client to upload a plug-in to a
  server. Due to security considerations described in the OpenVAS change request
  #4 [1], this message type has been removed from the protocol.

  Version information:
  The undocumented NESSUS_VERSION message type has been replaced with the
  OPENVAS_VERSION message type. When an OPENVAS_VERSION message is issued by the
  client, the server is expected to respond with a message containing the
  current server version.

  New message types:
  In addition to the existing message types HOLE, INFO and NOTE two new message
  types have been added to the protocol: DEBUG and LOG. Their purpose is to give
  clients more control about the verbosity of the messages they receive from the
  server.

  Detached scans:
  This functionality has been dropped due to design decisions.
  This means the following commands have been removed
  from the protocol: DETACHED_SESSIONS_LIST and DETACHED_STOP.
  The following preferences have been removed from the protocol as
  well: detached_scan, continuous_scan, delay_between_scan_loops,
  detached_scan_email_address.

  Plugin order information:
  The server command PLUGINS_ORDER was defined for NTP 1.2 but not
  implemented in the server.

GENERAL ASPECTS OF PROTOCOL

  The OTP protocol is text-based, human readable and line-oriented.

  Each line is made of fields separated by "<|>. The first fields indicates
  whether it is a command send by client or by server ("CLIENT" vs. "SERVER").

PROTOCOL INITIALIZER AND PROTOCOL FEATURES

    Description:

      The client start the protocol with a initializer of
      the protocol version followed by parameters switching
      on various features. Available protocol features are:

        dependencies       (server will use command PLUGINS_DEPENDENCIES)
        timestamps         (server will use command TIME)
        plugins_version    (server will add revision to plugin information)
        plugins_cve_id     (server will add cve id to plugin information)
        plugins_bugtraq_id (server will add bugtraq id to plugin information)

    Syntax:

      < OTP/1.0 >< protocol_feature1 protocol_feature2 ... >
      User : user_name
      Password : user_password

PROTOCOL COMMANDS

  ATTACHED_FILE

    Description:

      This command corresponds to the plugin preferences
      type "file". It follows the command PREFERENCES
      to upload the specified files from client to server.

    Syntax:

      CLIENT <|> ATTACHED_FILE
      name: file_name
      content: octet/stream
      bytes: file_length
      file_content

      where
        file_name:    the path and name of the file.
                      It is a identifier to reference the file
                      in the plugin preferences.
        file_length:  the number of bytes that will follow after the newline
        file_content: the actual file as byte stream.

  ERROR

    Description:

      In case of problems the server sends an error message with this
      command. In case of unrecoverable problems, the server will then
      close connection with BYE command.

    Syntax:

      SERVER <|> ERROR <|> error description <|> SERVER

  HOLE

    Description:

      With this command the server reports a identified
      problem of class "security hole".
      The "general" version is applied if no port relates to the hole.

    Syntax:

    SERVER <|> HOLE <|> host <|> service_name (port_number/protocol_type) <|> description <|> oid <|> SERVER

    SERVER <|> HOLE <|> host <|> general <|> description <|> oid <|> SERVER

    where
      host: the target system
      service_name: the name of the service (like in /etc/services)
      port_number: the port number the problem relates to.
      protocol_type: "tcp" or "udp".
      description: the problem description where newlines have been
                   replaced by semicolons.
      oid: the OID of the NVT that identified the problem.

  INFO

    Description:

      With this command the server reports a identified
      problem of class "security info".
      The "general" version is applied if no port relates to the info.

    Syntax:

    SERVER <|> INFO <|> host <|> service_name (port_number/protocol_type) <|> description <|> oid <|> SERVER

    SERVER <|> INFO <|> host <|> general <|> description <|> oid <|> SERVER

    where
      host: the target system
      service_name: the name of the service (like in /etc/services)
      port_number: the port number the problem relates to.
      protocol_type: "tcp" or "udp".
      description: the problem description where newlines have been
                   replaced by semicolons.
      oid: the OID of the NVT that identified the problem.

  NEW_ATTACK

    Description:

      With this command the client requests the server to attack target
      system(s) "host". "host" is one or many (comma-separated) IP or FQDN.

      Before the client sends NEW_ATTACK, the commands PREFERENCES and
      RULES should be applied.

    Syntax:

      CLIENT <|> NEW_ATTACK <|> host <|> CLIENT

  NOTE

    Description:

      With this command the server reports a identified
      problem of class "security note".
      The "general" version is applied if no port relates to the note.

    Syntax:

    SERVER <|> NOTE <|> host <|> service_name (port_number/protocol_type) <|> description <|> oid <|> SERVER

    SERVER <|> NOTE <|> host <|> general <|> description <|> oid <|> SERVER

    where
      host: the target system
      service_name: the name of the service (like in /etc/services)
      port_number: the port number the problem relates to
      protocol_type: "tcp" or "udp".
      description: the problem description where newlines have been
                   replaced by semicolons.
      oid: the OID of the NVT that identified the problem.

  PLUGINS_DEPENDENCIES

    Description:

      The PLUGINS_DEPENDENCIES messages are send after the RULES messages
      in case the protocol feature "dependencies" was set during protocol
      initialization.

    Syntax:

      SERVER <|> PLUGINS_DEPENDENCIES
      plugin_1_name <|> dependency1 <|> dependency2 <|> ... <|>
      plugin_2_name <|> dependency1 <|> dependency2 <|> ... <|>
      ...
      <|> SERVER

  PLUGIN_INFO

    Description:

      This command is issued by the client to request
      information of the NVT specified by its oid.

    Syntax:

      CLIENT <|> PLUGIN_INFO <|> oid <|> CLIENT

      The server answers with this line (analogous to PLUGIN_LIST command):

      oid <|> name <|> category <|> copyright <|> description <|> summary <|> family

      The following extensions are appended in the given order:

      In case protocol feature "plugins_version" is selected, the respective
      plugin_version is appended to the line:

      oid <|> name <|> category <|> copyright <|> description <|> summary <|> family <|> plugin_version

      In case protocol feature "plugins_cve_id" is selected, the respective
      cve_id is appended to the line, e.g.:

      oid <|> name <|> category <|> copyright <|> description <|> summary <|> family <|> plugin_version <|> cve_id

      In case protocol feature "plugins_bugtraq_id" is selected, the respective
      bugtraq_id is appended to the line, e.g.:

      oid <|> name <|> category <|> copyright <|> description <|> summary <|> family <|> plugin_version <|> cve_id <|> bugtraq_id

      In case no plugin with OID=oid is found, the server will not answer at all.

  PLUGIN_LIST

    Description:

      With this command the server sends detailed information about
      the available NVTs.

      The server will send PREFERENCES and RULES right after this command.

    Syntax:

      SERVER <|> PLUGIN_LIST <|>
      oid <|> name <|> category <|> copyright <|> description <|> summary <|> family
      oid <|> name <|> category <|> copyright <|> description <|> summary <|> family
      ...
      <|> SERVER

      Additional information might be apended according to some procotol features.
      Please refer to the description of the PLUGIN_INFO command for details.

  PORT

    Description:

      With this command the server reports on open port
      "port_number" on target system "host".

    Syntax:

      SERVER <|> PORT <|> host <|> port_number <|> SERVER

  PREFERENCES

    Description:

      With this command the values for the preferences are
      communicated. The server uses the commands to inform
      about defaults, the client uses the command to send
      the user selections. The server answers with PREFERENCES_ERROR.

      Available preferences:
      max_threads, test_file, email, ping_hosts, reverse_lookup,
      outside_firewall, host_expansion, port_range, max_hosts.
      And only sent by CLIENT: plugin_set (empty means all NVTs).

    Syntax:

      SERVER <|> PREFERENCES <|>
      pref_name <|> value
      pref_name <|> value
      pref_name <|> value
      ...
      <|> SERVER

      CLIENT <|> PREFERENCES <|>
      pref_name <|> value
      pref_name <|> value
      pref_name <|> value
      ...
      <|> CLIENT

  PREFERENCES_ERRORS

    Description:

      With this command the server reports problems with the
      parameters set by the client. It follows immediately
      the PREFERENCES command of the client.

      Each "pref_name" occuring in this list was not accepted
      by the server. The server will apply "default_value" instead.

      In case no "pref_name" is reported with this command,
      all preferences where accepted.

    Syntax:

      SERVER <|> PREFERENCES_ERRORS
      pref_name <|> default_value
      pref_name <|> default_value
      pref_name <|> default_value
      ...
      <|> SERVER

  RULES

    Description:

      Rules define restrictions for target systems.
      Client-side rules self-restrict target host patterns,
      server-side rules are just for information to the client.
      These rule sets are independent of each other.

    Syntax:

      SERVER <|> RULES <|>
      rule_1;
      rule_2;
      rule_3;
      ...
      <|> SERVER

      CLIENT <|> RULES <|>
      rule_1;
      rule_2;
      rule_3;
      ...
      <|> CLIENT

  STATUS

    Description:

      With this command, the server informs the client about
      the progress of the scan for target system "host".
      "attack_state" is either "portscan" or "attack".
      current is the currently processed port and max
      the last port number to be tested.

    Syntax:

      SERVER <|> STATUS <|> host <|> attack_state <|> current/max <|> SERVER

  STOP_ATTACK

    Description:

      With this command, the client tells the server to stop
      scanning target "host".

    Syntax:

      CLIENT <|> STOP_ATTACK <|> host <|> CLIENT

  STOP_WHOLE_TEST

    Description:

      With this command the client tells to stop
      the currently running test.

    Syntax:

      CLIENT <|> STOP_WHOLE_TEST <|> CLIENT

  TIME

    Description:

      The TIME messages will be send by the server
      in case the protocol feature "timestamps" was set during protocol
      initialization.

    Syntax:

      After completion of scanning a target host the server sends:

      SERVER <|> TIME <|> HOST_START <|> host <|> time_string <|> SERVER
      SERVER <|> TIME <|> HOST_END <|> host <|> time_string <|> SERVER

      or, in case STOP_ATTACK was issued by the client:

      SERVER <|> TIME <|> HOST_START <|> host <|> time_string <|> SERVER
      SERVER <|> TIME <|> HOST_INTERRUPTED <|> host <|> time_string <|> SERVER

      After completion of the whole scan the server sends:

      SERVER <|> TIME <|> SCAN_START <|> time_string <|> SERVER
      SERVER <|> TIME <|> SCAN_END <|> time_string  <|> SERVER

      where time_string is of the form "Wed Jun 30 21:49:08 1993".

REFERENCES
  [1] http://www.openvas.org/openvas-cr-4.html
