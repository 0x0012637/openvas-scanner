	#!/bin/sh
#
# nessus-adduser
#
# Written by Renaud Deraison <deraison@cvs.nessus.org>
#
# This script is distributed under the Gnu General Public License (GPL)
#

# check whether we have echo -n, depending
# on the current shell, used
case `echo -n` in
\-n)	Xn=   ; Xc='\c' ;;
*)	Xn=-n ; Xc=
esac



umask 066

is_cygwin=@is_cygwin@
prefix=@prefix@
exec_prefix=@exec_prefix@

# add the nessus installation path
PATH=@sbindir@:@bindir@:$PATH ; export PATH

# check if gettext is present

if [ -f /usr/bin/gettext.sh ];
then

  # initialize gettext

  . gettext.sh
  export TEXTDOMAIN=nessus-scripts
  export TEXTDOMAINDIR=@datadir@/locale

else

  # define dummy functions

  gettext () {
    echo $Xn "$1" $Xc
  }

  eval_gettext () {
    eval_gettext_var="echo $1"
    echo $Xn `eval $eval_gettext_var` $Xc
  }

fi

# make sure that we are root, if there is no id command,
# you loose, anyway

if [ -z "$is_cygwin" ];
then
 case `id 2>/dev/null` in 
 uid=0*) 
    # check the implementation
    nessusd -g || {
        gettext "Executing nessusd failed. Make sure your library loader is configured properly and that nessusd is in your \$PATH."; echo
        exit 1
	}
    ;; 
 *)
    gettext "Only root should use nessus-adduser."; echo
    exit 1
 esac
else
 nessusd -g
fi


prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
sbindir=@sbindir@
libexecdir=@libexecdir@
datadir=@datadir@
sysconfdir=@sysconfdir@
sharedstatedir=@sharedstatedir@
localstatedir=@localstatedir@
libdir=@libdir@
includedir=@includedir@
oldincludedir=@oldincludedir@
infodir=@infodir@
mandir=@mandir@


PATH=$PATH:$sbindir:$bindir:/usr/ssl/bin:/usr/local/ssl/bin:/opt/ssl/bin


# Test if we have MD5
X=`echo x | openssl md5`
if [ "$X" = "401b30e3b8b5d629635a5c613cdb7919" -o \
     "$X" = "401B30E3B8B5D629635A5C613CDB7919" ]; then
 MD5CMD="openssl md5"
else
 X=`echo x | md5sum | awk '{print $1}'`
 if [ "$X" = "401b30e3b8b5d629635a5c613cdb7919" -o \
      "$X" = "401B30E3B8B5D629635A5C613CDB7919" ]; then
  MD5CMD=md5sum
 else
  MD5CMD=""
 fi
fi



# find nessusd by the first path segment, ask for settings
nessusd_conf=` nessusd -s | sed '/^config_file  *= /!d; s/^[^=]*= *//;'`
	
# some checks
[ -s "$nessusd_conf" ] || {
	eval_gettext "Missing or empty configuration file \"\$nessusd_conf\"!"; echo
	exit 2
}

# path to a temporary directory
test -z "$TMPDIR" && {
  	if [ -d /var/tmp ];
	then
	  gettext "Using /var/tmp as a temporary file holder."; echo
	  TMPDIR=/var/tmp
	else
	  gettext "Your \$TMPDIR variable is not set!"; echo
	  echo $Xn "`eval_gettext "Enter the location to a place where I could place temporary files: [\\$HOME]"` $Xc"
	  read TMPDIR
	  test -z "$TMPDIR"  && TMPDIR=$HOME
	fi  
}




# Here we go
echo
gettext "Add a new nessusd user"; echo
echo "---------------------------------"
echo
echo

prompt=${ADDUSERPROMPT-0}

ok=`gettext "n"`
while test "$ok" = `gettext "n"`;
do
 echo $Xn "`gettext "Login :"` $Xc"
 read login
 if [ -d $localstatedir/nessus/users/$login ];
 then
   gettext "This login already exists. Choose another one."; echo
 else
   ok=`gettext "y"`
 fi
done


ok=`gettext "n"`
while test "$ok" = `gettext "n"`;
do
 echo $Xn "`gettext "Authentication (pass/cert) [pass] :"` $Xc"
 read auth
 test -z "$auth" && auth="pass"
 if [ "$auth" = "pass" -o "$auth" = "cert" ]; then
  ok=y
 fi
done

if [ "$auth" = "cert" ]; then
 dn=""
 gettext "Please enter User Distinguished Name:"; echo
 #
 echo $Xn "`gettext "Country:"` $Xc"
 read x && [ -n "$x" ] && dn=$dn/C=$x
 echo $Xn "`gettext "State:"` $Xc"
 read x && [ -n "$x" ] && dn=$dn/ST=$x
 echo $Xn "`gettext "Location:"` $Xc"
 read x && [ -n "$x" ] && dn=$dn/L=$x
 echo $Xn "`gettext "Organization:"` $Xc"
 read x && [ -n "$x" ] && dn=$dn/O=$x
 echo $Xn "`gettext "Organizational Unit:"` $Xc"
 read x && [ -n "$x" ] && dn=$dn/OU=$x
 echo $Xn "`gettext "Common Name:"` $Xc"
 read x && [ -n "$x" ] && dn=$dn/CN=$x
 echo $Xn "`gettext "e-Mail:"` $Xc"
 read x && [ -n "$x" ] && dn=$dn/Email=$x
else
askPasswd=`gettext "Login password :"`
askPasswdAgain=`gettext "Login password (again) :"`
sayPasswd=`gettext "Password          :"`

ok="n"
while test "$ok" = "n";
do
 echo $Xn "$askPasswd $Xc"
 stty -echo
 read password
 echo
 echo $Xn "$askPasswdAgain $Xc"
 read password_again
 stty echo
 echo
 
 if test -z "$password" ; then
   gettext "Your password can not be empty."; echo
 else
   if [ "$password" != "$password_again" ]; then
    gettext "Passwords do not match!"; echo
   else
    ok="y"
   fi
fi
done

fi

if [ $prompt -eq 0 ] ; then
echo 
gettext "User rules"; echo
echo "---------------"

eval_gettext "nessusd has a rules system which allows you to restrict the hosts that \$login has the right to test."; echo
gettext "For instance, you may want him to be able to scan his own host only."; echo
echo
gettext "Please see the nessus-adduser(8) man page for the rules syntax."; echo

echo
gettext "Enter the rules for this user, and hit ctrl-D once you are done:"; echo

tmpAddUserDir="$TMPDIR/nessus-adduser.$$/"
tmpAddUserFile="$TMPDIR/nessus-adduser.$$/rules.$$"


gettext "(the user can have an empty rules set)"; echo

mkdir -m 0700 $tmpAddUserDir || { eval_gettext "Error - could not create \$tmpAddUserDir"; echo; exit 1; }

cat > $tmpAddUserFile || {
  	eval_gettext "Error - could not write \$tmpAddUserFile"
	exit 1
}

echo 
echo
gettext "Login             : "; echo $Xn "$login" $Xc ; echo
test -n "$dn" || echo "$sayPasswd ***********" ; 
test -n "$dn" && eval_gettext "DN                : \$dn";
echo
gettext "Rules             : "; echo


cat $tmpAddUserFile

echo
echo
gettext "Is that ok? (y/n) [y] "
else
	cp /dev/null $tmpAddUserFile
fi
read ok

# check for answer, default is Yes, abort on other reply
case $ok in ''|[`gettext "Yy"`]*);; *) 
    rm -rf $tmpAddUserDir
    gettext "Aborted"; echo
    exit 0
esac

# add the user rules in our rules files. 
#
# The users file must end with the default user '*', so we add
# our data at the TOP of the file



#echo "$login:$password" > $TMPDIR/adduser.$$
	

chmod 0700 "$localstatedir/nessus/"
mkdir -p "$localstatedir/nessus/users/$login"
chmod 0700 "$localstatedir/nessus/users/$login"






#
# Create the auth. dir, which contains the user rules,
# password, and plugin acl
#
mkdir -p "$localstatedir/nessus/users/$login/auth"
chmod 0700 "$localstatedir/nessus/users/$login/auth"

#
# Create the plugins dir, which contains the user plugins
#
mkdir -p "$localstatedir/nessus/users/$login/plugins"
chmod 0700 "$localstatedir/nessus/users/$login/plugins"



if [ "$auth" = "pass" ]; then
    if [ "$MD5CMD" ]; then
    	test -c /dev/urandom &&
	{
	URANDOM=`dd if=/dev/urandom bs=16 count=16 2>/dev/null|$MD5CMD`
	}
	SEED=`(echo $SEED; date; df; ls -l; echo $URANDOM) | $MD5CMD | awk '{print $1}'`
	H=`echo $Xn $SEED$password$Xc | $MD5CMD | awk '{print $1}'`
	echo $H $SEED > "$localstatedir/nessus/users/$login/auth/hash"
    else
	echo "$password" > "$localstatedir/nessus/users/$login/auth/password"
    fi
elif [ "$auth" = "cert" ]; then
	echo "$dn" > "$localstatedir/nessus/users/$login/auth/dname"
fi



cp $tmpAddUserFile "$localstatedir/nessus/users/$login/auth/rules"



rm -rf $tmpAddUserDir





gettext "user added."; echo

